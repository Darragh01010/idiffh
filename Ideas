putchar(*a);
	putchar(*b);


    regex_t regex;
        int reti;
        char msgbuf[100];

/* Compile regular expression */
        reti = regcomp(&regex, ": [%1]*", 0);
        if( reti ){ fprintf(stderr, "Could not compile regex\n"); exit(1); }

	 alen1  -=  alen1 && a[alen1 - 1] == '\n';
  	blen1  -=  blen1 && b[blen1 - 1] == '\n';
	
	for(a = 0; a<blen;a++){
		array[count] += *a;
		if(*a == '\n'){
			array[count] += *a;
			count++;
		}
	}


  	for (i=0;i<array.length();i++)
		{
        reti = regexec(&regex, array[i], 0, NULL, 0);
        if( !reti ){
               array[i].replace()
		
        }
        else if( reti == REG_NOMATCH ){
                continue;
        }
        else{
                regerror(reti, &regex, msgbuf, sizeof(msgbuf));
                fprintf(stderr, "Regex match failed: %s\n", msgbuf);
                exit(1);
        }
	for(j=0;j<array.length();j++){
		replacement += array[i];
	} 
/* Free compiled regular expression if you want to use the regex_t again */
	regfree(&regex);
  *a = *replacement;





 regex_t regex;
        int reti;
        char msgbuf[100];
	regmatch_t pmatch[10];
	int i = 0;


/* Compile regular expression */
        reti = regcomp(&regex, ": [%0-9]*", 0);
        if( reti ){ fprintf(stderr, "Could not compile regex\n"); exit(1); }

	 reti = regexec(&regex, a, 0, NULL, 0);
        if( !reti ){
              for(i=1;i < 6;i++){
		a[pmatch[i].rm_so] = '\n';
		a[(pmatch[i].rm_so)+1] = '\0';
		}
        }
        else if( reti == REG_NOMATCH ){
                continue;
        }
        else{
                regerror(reti, &regex, msgbuf, sizeof(msgbuf));
                fprintf(stderr, "Regex match failed: %s\n", msgbuf);
                exit(1);
        }

regfree(&regex);
