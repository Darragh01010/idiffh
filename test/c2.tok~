
#
include: %32
<
stdio
.
h
>: %13
#
include: %32
<
ctype
.
h
>: %13
#
include: %32
<
stdlib
.
h
>: %13
: %13
/
/: %32
tokenises: %32
standard: %32
in
,: %32
emitting: %32
one: %32
line
/
token
,: %32
with: %32
trailing: %13
/
/: %32
whitespace: %32
(
possibly: %32
empty
): %32
following: %32
each: %32
token: %32
represented: %32
by: %32
a: %13
/
/: %32
colon: %32
followed: %32
by: %32
percent
-
encoded: %32
ascii
.: %13
: %13
/
/: %32
Example
,: %32
in
:: %13
: %13
/
/: %32%32%32
The: %32
quick
,: %32
brown: %13
/
/: %32
fox: %32%32
jumps
!: %32
over: %13
: %13
/
/: %32
generated: %32
out
:: %13
: %13
/
/: %32
::
%:
3
2
%:
3
2: %13
/
/: %32
The
::
%:
3
2: %13
/
/: %32
quick
:: %13
/
/: %32
,
::
%:
3
2: %13
/
/: %32
brown
::
%:
1
3: %13
/
/: %32
fox
::
%:
3
2
%:
3
2: %13
/
/: %32
jumps
:: %13
/
/: %32
!
::
%:
3
2: %13
/
/: %32
over
::
%:
1
3: %13
: %13
: %13
/
/: %32
Note
:: %32
compile: %32
with: %32
-
DNDEBUG: %32
to: %32
turn: %32
off: %32
debugging: %32
chatter
.: %13
: %13
void: %13
usage: %32
(
): %13
{: %13
 %32
fprintf: %32
(
stderr
,: %13
	: %32%32%32
"
Tokenize: %32
stdin
,: %32
stdout: %32
is: %32
one: %32
token
/
line
,: %32
whitespace: %32
encoded
.
\
n
"
)
;: %13
 %32
fprintf: %32
(
stderr
,: %32
"
Usage
:: %32
separate: %32
<: %32
file
-
to
-
tokenize: %32
>: %32
token
-
file
\
n
"
)
;: %13
 %32
fprintf: %32
(
stderr
,: %32
"
Example
:: %32
(
echo: %32
a: %32
man
,: %32
a
;: %32
echo: %32
plan
)
|
separate
\
n
"
)
;: %13
}: %13
: %13
inline: %32
int: %13
ss: %32
(
char: %32
*
s
): %13
{: %13
 %32
return: %32
fs: %32
(
s
,: %32
stdout
)
;: %13
}: %13
: %13
: %13
int: %13
main: %32
(
int: %32
argc
,: %32
char: %32
*
argv
[
]
): %13
{: %13
 %32
if: %32
(
argc: %32
!
=: %32
1
): %13
 %32%32%32
{: %13
 %32%32%32%32%32
usage: %32
(
)
;: %13
 %32%32%32%32%32
exit: %32
(
1
)
;: %13
 %32%32%32
}: %13
: %13
 %32
char: %32
temp
;: %13
 %32
int: %32
i: %32
=: %32
0
;: %13
 %32
int: %32
ch
;: %13
 %32
while: %32
(
(
ch: %32
=: %32
getchar: %32
(
)
): %32
!
=: %32
EOF
): %13
 %32%32%32
{: %13
#
ifndef: %32
NDEBUG: %13
 %32%32%32%32%32
fprintf: %32
(
stderr
,: %32
"
(
%:
c
)
"
,: %32
ch
)
;: %13
#
endif: %13
 %32%32%32%32%32
if: %32
(
ch: %32
=
=: %32
'
\
t
': %32
&
&: %32
(
isalpha: %32
(
temp
)
)
): %13
	
{: %13
	: %32%32
ss: %32
(
"
:: %32
"
)
;: %13
	: %32%32
ss: %32
(
"
%:
9
"
)
;: %13
	
}: %13
 %32%32%32%32%32
else: %32
if: %32
(
i: %32
=
=: %32
0: %32
&
&: %32
(
isalpha: %32
(
ch
)
)
): %13
	
{: %13
	: %32%32
char: %32
(
ch
)
;: %13
	
}: %13
 %32%32%32%32%32
else: %32
if: %32
(
(
isalpha: %32
(
temp
)
): %32
&
&: %32
ch: %32
=
=: %32
'
\
n
'
): %13
	
{: %13
	: %32%32
ss: %32
(
"
:: %32
"
)
;: %13
	: %32%32
ss: %32
(
"
%:
1
3
"
)
;: %13
	: %32%32
char: %32
(
'
\
n
'
)
;: %13
: %13
	
}: %13
 %32%32%32%32%32
else: %32
if: %32
(
!
(
isalpha: %32
(
temp
)
): %32
&
&: %32
ch: %32
=
=: %32
'
\
n
'
): %13
	
{: %13
	: %32%32
ss: %32
(
"
:: %32
"
)
;: %13
	: %32%32
ss: %32
(
"
%:
1
3
"
)
;: %13
	: %32%32
char: %32
(
'
\
n
'
)
;: %13
: %13
	
}: %13
: %13
 %32%32%32%32%32
else: %32
if: %32
(
temp: %32
=
=: %32
': %32
': %32
&
&: %32
ch: %32
=
=: %32
'
\
n
'
): %13
	
{: %13
	: %32%32
ss: %32
(
"
%:
1
3
"
)
;: %13
	: %32%32
char: %32
(
'
\
n
'
)
;: %13
: %13
	
}: %13
 %32%32%32%32%32
else: %32
if: %32
(
ch: %32
=
=: %32
'
\
n
'
): %13
	
{: %13
	: %32%32
ss: %32
(
"
:: %32
"
)
;: %13
	: %32%32
ss: %32
(
"
%:
1
3
"
)
;: %13
	: %32%32
char: %32
(
'
\
n
'
)
;: %13
: %13
	
}: %13
 %32%32%32%32%32
else: %32
if: %32
(
temp: %32
=
=: %32
'
\
n
': %32
&
&: %32
isalpha: %32
(
ch
)
): %13
	
{: %13
	: %32%32
char: %32
(
ch
)
;: %13
	
}: %13
 %32%32%32%32%32
else: %32
if: %32
(
temp: %32
=
=: %32
'
\
n
': %32
&
&: %32
(
!
isalpha: %32
(
ch
)
)
): %13
	
{: %13
	: %32%32
char: %32
(
ch
)
;: %13
	
}: %13
 %32%32%32%32%32
else: %32
if: %32
(
temp: %32
=
=: %32
': %32
': %32
&
&: %32
(
isalpha: %32
(
ch
)
)
): %13
	
{: %13
	: %32%32
char: %32
(
'
\
n
'
)
;: %13
	: %32%32
char: %32
(
ch
)
;: %13
	
}: %13
	: %13
: %13
 %32%32%32%32%32
else: %32
if: %32
(
(
!
(
isalpha: %32
(
temp
)
)
): %32
&
&: %32
(
isalpha: %32
(
ch
)
)
): %13
	
{: %13
	: %32%32
if: %32
(
temp: %32
=
=: %32
'
::
'
)
{: %13
	: %32%32
char
(
'
::
'
)
;: %13
	: %32%32
}: %13
	: %32%32
if: %32
(
temp: %32
=
=: %32
'
%:
'
)
{: %13
	: %32%32
char
(
'
::
'
)
;: %13
	: %32%32
}: %13
	: %32%32
char: %32
(
'
\
n
'
)
;: %13
	: %32%32
char: %32
(
ch
)
;: %13
	
}: %13
 %32%32%32%32%32
else: %32
if: %32
(
isalpha: %32
(
ch
)
): %13
	
{: %13
	: %32%32
char: %32
(
ch
)
;: %13
	
}: %13
: %13
 %32%32%32%32%32
else: %32
if: %32
(
(
isalpha: %32
(
temp
)
): %32
&
&: %32
ch: %32
=
=: %32
': %32
'
): %13
	
{: %13
	: %32%32
ss: %32
(
"
:: %32
"
)
;: %13
	: %32%32
ss: %32
(
"
%:
3
2
"
)
;: %13
: %13
	
}: %13
 %32%32%32%32%32
else: %32
if: %32
(
(
!
(
isalpha: %32
(
temp
)
)
): %32
&
&: %32
temp: %32
!
=: %32
': %32
': %32
&
&: %32
ch: %32
=
=: %32
': %32
'
): %13
	
{: %13
	: %32%32
ss: %32
(
"
:: %32
"
)
;: %13
	: %32%32
ss: %32
(
"
%:
3
2
"
)
;: %13
	
}: %13
 %32%32%32%32%32
else: %32
if: %32
(
ch: %32
=
=: %32
': %32
'
): %13
	
{: %13
	: %32%32
ss: %32
(
"
%:
3
2
"
)
;: %13
	
}: %13
 %32%32%32%32%32
else: %32
if: %32
(
(
!
(
isalpha: %32
(
ch
)
)
): %32
&
&: %32
temp: %32
=
=: %32
': %32
'
): %13
	
{: %13
	: %32%32
char: %32
(
'
\
n
'
)
;: %13
	: %32%32
char: %32
(
ch
)
;: %13
: %13
: %13
	
}: %13
: %13
 %32%32%32%32%32
else: %32
if: %32
(
(
isalpha: %32
(
temp
)
): %32
&
&: %32
(
!
(
isalpha: %32
(
ch
)
)
)
): %13
	
{: %13
	: %32%32
char: %32
(
'
\
n
'
)
;: %13
	: %32%32
char: %32
(
ch
)
;: %13
: %13
	
}: %13
 %32%32%32%32%32
else: %32
if: %32
(
!
(
isalpha: %32
(
temp
)
): %32
&
&: %32
(
!
(
isalpha: %32
(
ch
)
)
)
): %13
	
{: %13
	: %32%32
if: %32
(
temp: %32
=
=: %32
'
::
'
)
{: %13
	: %32%32
char
(
'
::
'
)
;: %13
	: %32%32
}: %13
	: %32%32
if: %32
(
temp: %32
=
=: %32
'
%:
'
)
{: %13
	: %32%32
char
(
'
::
'
)
;: %13
	: %32%32
}
	: %13
	: %32%32
char: %32
(
'
\
n
'
)
;: %13
	: %32%32
char: %32
(
ch
)
;: %13
: %13
	
}: %13
: %13
 %32%32%32%32%32
else: %13
	
{: %13
	: %32%32
char: %32
(
ch
)
;: %13
	
}: %13
: %13
 %32%32%32%32%32
temp: %32
=: %32
ch
;: %13
 %32%32%32%32%32
i
+
+
;: %13
 %32%32%32
}: %13
}: %13
